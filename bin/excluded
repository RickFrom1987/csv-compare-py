#!/usr/bin/env python
import csv
import re
import pprint
import os.path

source_name = "woo-all-1-15.csv"
source_file = csv.DictReader(open(os.path.dirname(__file__) + "/../csv-input/" + source_name))
source_order_numbers = []
source_dupes = []
source_dict = {}

comparator_name = "xero-1-15.csv"
comparator_file = csv.DictReader(open(os.path.dirname(__file__) + "/../csv-input/" + comparator_name))
comparator_order_numbers = []
comparator_dupes = []
comparator_dict = {}

exists_in_source_not_in_comparator = []

def source_to_dict():
  global source_dict
  global source_order_numbers
  global source_dupes

  for row in source_file:
    order_key = str(row['order_number'])

    #report possible duplicates
    if source_dict.has_key(order_key):
      source_dupes.append(order_key)

    # Create Hash of Keys and Rows
    source_dict[order_key] = row

    # Create list of order numbers
    source_order_numbers.append(order_key)
  return

def comparator_to_dict():
  global comparator_dict
  global comparator_order_numbers
  global comparator_dupes
  regex = r"\bMoment-\b"
  
  for row in comparator_file:
    ref_key = str(row["Reference"]).strip().replace(" ", "")
    ref_key = re.sub(regex, "", ref_key)

    #report possible duplicates
    if comparator_dict.has_key(ref_key):
      comparator_dupes.append(ref_key)

    # Create Hash of Keys and Rows
    comparator_dict[ref_key] = row

    # Create list of ref numbers
    comparator_order_numbers.append(ref_key)
  return

def find_source_order_in_comparator():
  global source_order_numbers
  for source_key in source_order_numbers:
    is_match = comparator_dict.get(source_key)
    # if it's not a match that means a key exists in the source that doesn't exist in the comparator
    if is_match is None:
      exists_in_source_not_in_comparator.append(source_dict.get(source_key))
  return

def write_to_csv():
  global source_name

  if len(exists_in_source_not_in_comparator) > 0:
    keys = exists_in_source_not_in_comparator[0].keys()
    with open(os.path.dirname(__file__) + '/../csv-output/excluded-' + source_name, 'wb') as output_file:
        dict_writer = csv.DictWriter(output_file, keys)
        dict_writer.writeheader()
        dict_writer.writerows(exists_in_source_not_in_comparator)
        print os.path.basename(__file__) + ".csv generated"
  else:
    print "No results to write to csv"
  return

def main():
  global source_dict
  global source_order_numbers
  global source_dupes
  global comparator_dict
  global comparator_order_numbers
  global comparator_dupes
  global exists_in_source_not_in_comparator

  print "========== Analyze =========="    
  source_to_dict()
  print "Done: source to dict: " + str(len(source_dict.keys()))
  print "Done: source order numbers: " + str(len(source_order_numbers))

  comparator_to_dict()
  print "Done: comparator to dict: " + str(len(comparator_dict.keys()))
  print "Done: comparator order numbers: " + str(len(comparator_order_numbers))

  source_dupes = list(set(source_dupes))
  print "Possible Dupes in source: " + str(len(source_dupes))

  comparator_dupes = list(set(comparator_dupes))
  print "Possible Dupes in comparator: " + str(len(comparator_dupes))
  print comparator_dupes

  print "========== Summary =========="
  find_source_order_in_comparator()
  print "In source not in comparator: " + str(len(exists_in_source_not_in_comparator))
  write_to_csv()



if __name__ == "__main__":
   # stuff only to run when not called via 'import' here
   main()